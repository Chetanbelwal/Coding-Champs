Create server file and server

1 server ma jo route bnaya now make router folder usme vo routes bnao or server file ma mount krdo using app.use('api/auth',router)
and routes create kro using express.router()
Router is mini expresss


2 router ke code ko b simplify krne ke liye we can use controller 
create a folder and file controller inside that create controller and usko router ma call krlo 

3 Whenever you are playing with json inside express js you have to add middleware app.use (express.json())on server.js it is very important to place before any routes that handle json data in request body


4 For database create utils folder inside that create db.js 
it will ne used to setup connection with mongodb where on URI pass the connection link 
and mongoose.connect(URI)
and basic step within try catch block

5 Using dotenv will make private info undetectable on code before using please use it as middleware on server.js
by requiring dotenv then dotenv.config()


6 Creating usrr model and schema for that create new folder models where we will keep all models and their defined schema for creating schema use mongoose.Schema and create  schema of param we needed with their type and all values once done create model using this schema using mongoose.model that takes two parameter one is model name(should be singular ) which will be automatically plural on database and another parameter is schema name
then export it


7 now we have succesfuly created model and export it, grab that exported model on controller where we will test our register logic
for registration follow these step
1 retreive all data username email password all those 
2 check email existence if useralreadyexist or not
3 hash the password
4 create user with hashed password using User.create (all fields such as email pswrd)
5 save to data base
6 respond succesful message


8 for hasing password using bcrypt you can add saltround and hash it on registration logic also but for making code clear use pre method
so on the userschema before creating model we will call pre method on that schema with "save" mode so before actually creating data in that model this pre will run. so just grab the userdata using this
then hashIt
then set this.pasword = hashedpassword
if somehow we already have user registered and pwd is not modified we will directly use next() method to skip above process of bcrypting.

9 jwt json web token is used to create token that will help us in authentication and authorization .Always store token in client side and never store it in db
our schema have more power and it have method 
schemanema.method.methodname = function(){
 return jwt.sign({ iske andar payload pass krna ki token ma kya kya pass krna ha hume vo b tostring ma cnvert krke taki token compatable rhe har pass kiye data par },
signature pass kre ge jiske basis pr token generate hoga ye unique ha ise env file ma rkhna {kab expire hona ha token ko vo time dena}

now is method ko jo ye hmne bnaya cntroller ko de denge taki client side ma as cookie token save rkhe 

10 creating login logic is also simple we can pick up same model we have for registration to get email and password we will check on login controller that userexist or not if not we will show invalid cred then we will compare password if pwd is same we will send response with msg, userid, token
The comparision of password can be used by premethod using same schema we did for generatetoken

11 Using Zod validation

for using zod first define schema of zod inside folder validator file auth validator
once done with schema export it
now on our router we are routing to registration page suppose before routing we will check whether validation is done properly or not for this we will create folder middleware and file validate middleware now for zod we have method
schemaname.parseAsync(req.body)
we will put body content inside this if it is passed we will set req.body = schemaname.parseAsync(req.body)
and next() 
if it failed we will execute error block where the message we have written on schema will be pop out, to grab message inside error use error.error[0].message and pass it to json.
on our main router pass pass validate middleware with schema name before main registration call.


12 currently we are handling errors by our own on catch block what what we can do instead of calling it by us we can use one middleware 
just call next(error) inside catch block it will redirect us to error-middleware file where we will define a common approach to display our error
but remember as this is middleware we need to have it on our server.js file just before we are setting us connection

13 on frontend react wheneve we are ecporting a component directly such as export const login=() =>  

we have to get it as object on another file such as  import {login} from " path"

while if we export after defining function such as 
export default App we can get it as import App from  " path"


14 Registration frontend ma label vgera backend ke schema jese hi likhna taki dikkat na aae future ma

15 frontend ka data backend se cnct krke database ma kaise store kre?

on handle submit we have to get our response we have two method to get it using fetch or using axios lets go with fetch
fetch (url  , { here we will pass it as object and thing are similar we did on postman like method: "POST", headers :{ here contenttype as application/json } , now what to pass in body 
 body: JSON.stringify(user),}); 

why stringify as we see after consoling user that it is in object form but we needed data to be passed on bady as json so we are stringifyinh it
now we have the response and we post it to the url given
this fetch return promise to handle that we can keep it as await and handlesubmit method as async


16 while clickinh on submit button we can see an error on console related to CORS policy 
cors policy error is a security feature implemented in all web pages to restrict in making request to a different domain
as our server is hosted on different domain 5000 while frontend on different domain 
to avoid this we have to use a middleware cors
require cors
setup corsOptions  pass origin that is frontend request url , pass method for which u need access here we will give all method access post put patch delete head etc
once done write app.use(cors(corsOptions)) before using express.json() middleware
as first we will give access than only we can use express.json() to handle json data in our code

for being more profesional once we get response while consoling it we can see we have ok:true
so we can write if response.ok  we will reset all state we have entered as blank that is keeping email, name all as blank
and navigate to login page
for navigating to login page we can use useNavigae from reactRouter Dom
just require it  using navigate = useNavigate() and use whereber u need
in our case we will use it as 
Navigate("/login)


17 in our few step back we were storing token while sending msg in res.status 
now at frontend we will grab that response from server
inside tahta response we will be having token 
we can directly use localstorage
setItem(resdata.token)  here resdata is response.json() 
but we need this token to store at localstorage at different different place for that we will user context api
inside context api we will create a provider that consist of this localstorage method and once fun is created we will pass it as children to provider to use on further components

but we also need one consumer that hold entire context we created that can create using customised hook which will act as consumer 
and wherever we wanna use localstorage function we will call our consumer their and use function.
in our code useAuth is consumer

18 - for logout functionality it is simple we are setting up token when we register or when we login so we will just remove that token whenever we press on logout button
that can be done using state just change state variable token to empty when logout is pressed and when login pressed set it to token value

in navbar we have  to deal with logout to show when logged in    and login register to show when logged out
that can be easily done just keep one isLoggedIn variable in store and pass it to provider 
then use it in navbar by calling our customised hook 
use ternary operator in react to show logout if useridLogged in  and to show login register if user is logged out

19- now whoever user is logged in will have a token with the use of this token we will authenticate user using authMiddleware whether user is genuine or not
in authMIddleware first we will grab token from header if token not valid we will send message unauthorised
Also the token we get from frontend starts with Bearer nahsnwbebsjwbshsbw
now we will seperate token feom bearer then we will use jwt.verify and verify the token 
the token which is verified itself consist of user data which we pass during jwt.sign as payload
using that data we can search in our db and get complete user data
as Auth is middleware we will pass req object with custom properties euch as req.email  req.id   req.token
to pass info from this middleware
by this whoever will navigate to /user api will have the user details after confirming token and make it available to route handlers



20 - Agar koi file ka data API se call krke frontent ma show krna ha to uska pehle backend create krna pdega

Backend ka process ye ha- pehle db ma collection bnao plural name ki or isme vo json file ka data bnado theek hai
fir models bnao us file ke content ke hisab se, model na name singular dena
fir router bnao uska ki kis route pr jake vo call hogi or post get kya kregi, ofcourse hum get kraenge
get (function pass krdo )

function hum controller pr define krenge jha hum bs us model se data find krenge
agar response mila to bs console kra denge simple

Also ek error aai thi mjh vo isliye ki route jo bnaya usko main server.js ma b call krke set krna pdega vrna usko kese pta ki koi route bnaya b ha humne
to route require kiya pehle

uske bad us route ko 
app.use ('/api/data", routekanaam)
krke call kr dia

ek bat or dhyan dena ki router bnate time usko module.exports = router jrur krna
uske bad hi aap usko seever.js ma require kr paoge

21 Now ise backend ma to check kr lia ab frontend ma yhi data dikhane ke liye 
sbse pehle provider ma ek function bnaenge getServices jiska kaam hoga API fetch krna or usse agar response mile to use apne statefunction setServices ma pass kr dena, parse krne ke baad

Ab hmare setServices function ne vo sara data  jo humne API ma feed tha usko services ke andar store ke dia
[services, setService ] =useState("")

ab is services ko hum apne provider ko pass ke denge taki it will be available for our pages whwere we need we can call it.

remember we want services to relod once page load so hum getServiceData function ko hmare useEffect ma dal denge

Ab store ka kaam khtm
ab jab hum apne service page ma aenge vha store se pehle useAuth ko require krenge
phir us useAuth se services ko destructure krnege taki direct use kr ske

phir kuch ni bs services.map krke isko apne react code ma use kr lenge jo jo hume har ek array ma se lena (name, description, etc) jese b database ma, model mai store kia hoga us hisab ke naming se

22 Remember we have done Zod validation of registration page signUpSchema
now to show its validation result as alert in frontend  nothing much to do
we already have validateMiddleware that is passing error to error middleware 
inside error we have message and extradetails now our task is to get those in frontend so hum kya krenge login.jsx ma resData grab krenge or usse 
resdata.extraDetails nikaldenge agar reponse ok nhi hua tooo
usi extradetails ko alert kra denge
same chij login ke liye b krenge

also loginSchema jo zod ma bnaenge isma email or password define hoga, or vhi schema hme signup ma b chaiye
to we can weite loginschema.extend ( baki jo b extra validation ke parameters ha vo likh denge)

23 - apne alerts ko or acha dikhane ke liye we will install react toastify 
isko bs require kro main.jsx ma
phir as a component pass krdo iske childs ko available ho jae taki
or childs pages ma jha b use krna toast ko require kro and alert ke bdle toast likhdo
toast.error, toast.success etc


---Admin Panel-----

1 To create admin panel we have to do three steps first create admin router where we will define routes and that router will call a function that is our controller 
on controller we will use user model to get user data and contact model to get contact data
then controller will get user data using User.find()
once done we will return res.json(users)
same for contact also

do not forget to define router in server.js also do not forget to module.exports = Router

2 To get them jwt token authenticated we have authMiddleware that will fetch api only if user have token that middleware we will use before calling our controller in admin route

3 Now to verify whether the loggin in user is admin or not we will again create one middleware adminMiddleware
so first data will be passed from authMiddleware it will verify token and we have defined a property req.user in it that contains current logged in user data
now next middleware i.e authMiddleware have that req.user property also passed from authmiddleware we will use this property and check if req.user.isAdmin is true or not if yes we will use next()
else we will return response saying acess denied

4 Creating admin navigation
withing react router dom App.jsx we have defined multiple routes
similarly we will create nester route for admin
main router with path /admin 
and child with users contacts etc
with elements pointing at different pages


But you will see when u will try to nacigate /admin/users  
you will see adminpage only not users page
matlab parent page dikhega uske andar ka nested page ni

for this we will use <Outlet> component inside parent to show its child also whenever navigated.


5 How to get all users data after route defined in frontend
So its easy firstof all whenever page called we want useeffect to load a function getAllUsersData()
inside that function we will fetch api 
have method Get and headers have authentication as token
we will get this token from our store we can define bearer token on store and pass it to provider
then we can get it on users component by our custom defined consumer useAuth()
so where were we 
yes we get response now
we will store response.json()
and can store it in variable data

now data variable will have all the users data.
to show it in good way in frontend we can define state variable 
and pass that data in that state variable
by this we can map it in frontend and show all data


6 How to delete users data

First frontend will click on delete button which have deleteuser method
that method will  fetch api where at the end of api we will pass user id

now req goes to backend where first we will create route
which take /users/delete/:id
here id is custom parameter
now controller will pick id from url using req.params.id

we will then delete user whose _id = id we get from url (which was passed from frontend )


now if response is ok on frontend we will again render getAllUsersData method to show updated user list on frontend


        UPdate method

1 defining update in backend

define route on router 
on controller get id from req.params.id
then use findone to get data

2 defining routes in frontend
 now on frontend we will define routes  that will be dynamic in nature 
see so whenever we will click on edit we will pass it id on route
Link to ="users/curUser._id/edit

it will trigger route we have define on App.jsx
that route will triger AdminUpdate page
inside that page we will first Grab our id using useParams  hook (this hook is used to grab the dynamic component passed in route, in our case it is :id)
then we will fetch Api we define on backend which will fetch user data for which we have click on edit
once we get that reaponse we will set it in a variable  and pass that variable to State variable 

now this statevariable have userdata
and we can use userdata.username
etc as value to inputs 
so we can bydefault keep user data on edit page. same we did for contact page remember


3 Now we have updated user data in frontend once we click on update
backend will trigger

backend logic will be we will defind router with patch method 
that will route to user/update/:id

then that will call controller
where we will first get id from req.params.id 
To get all the data we fill during Update form we can get it by req.body
now we will use Updateaone method which will first verify id then $set: updatedData that we get from req.body

by this we will have updatedData as a response from backend and ready to pass on frontend

4 For frontend part to update user data
we will be submitting form right
so that form will trigger onSubmit method handleSubmit

now first we will prevernt default behaviour of form submitting using e.preventDefault
then we will fetch our backend ApI
but as it is Patch request
we have to pass content type as Json with authorization token

then we want body :  data to stringify and convert it in Json to make patch request succesful
that's it
this logiv will automatically update user data.

7 - Repeating same stuff we did for getusers data and delete user data
we will do for contact


8 Securing our admin route

we have the user data on store
so we will call it and check if it is admin or not
if user.isAdmin is false we will navigate it back to home page else we will render the admin dashboard

but their is one problem when you will check user.isAdmin at that time user data is not fetched 100% and admin component rendered returning user.isAdmin value as undefined

to tackle this we have the concept of loading state
so on auth.jsx where actually usee data we are fetching their we will declare a state loadingz setLoading
initially it will remain true but once data load we will make it false
and pass it to provider so adminLayout can use this state

 changing it to false will render our component again and will show us admin dashboard

till time when loading is true we can show a loading image to show data is loading.



One liner Points

1 - setup server.js jha pr hum router ko call krenge and app.use ma likhenge

2 setup router jha hum controller ko call krenge and justify krenge get post kesi req hai

3 setup controller jha hum actual ma kya hora ha us route pr uski defination likhenge

4 utils folder ma db.js bnao vha mongoose req krke URI likho
fir mongoose.connect(URI) krdo ek method mai

5 schema model bnado

6 registratn steps - req.body se data uthao
find se dekho userExist to ni
nhi hai to UserModalkanaam.create krke create krdo db mai   await krna mat bhulna

7 create krne se pehle pwd ko hash krdo
jo ki ek premethod se kr lena
premethod apke model ma hi define krdo
jiska kaam hoga database ma save krne se pehle run hona

8 jab register ho jae to token generation b json web token se krdo
res.send mai token ka method pass krdo
jiski defination hum model ma kr denge 
schemaName.methods.generateToken

9 login ke liye model schema apka user ka hi use hoga..or bs dekho email exist krta ya ni databas3 ma
pwd bcrypt.compare se compare krlo
or response dikhado

10 zod validation schema creation then create validate middleware that takes zod vala schema

11 error middleware create kro -- do not frget to add app.use(errorMiddleware) just before code where connection is setup
taki next(error ).likhte hi errormiddleware call ho jae

12 create react frontend

13 connect front to back using fetch api and all headers contenttype details 
add cors middleware to connect frontend to backend

14 backend ma register krke hum response.json krke msg token userid pass krre the
vhi hum frontend pr response ma get kr paenge will be used to store in localstorage 

15 to logout just remove the token (can be removed by setting setTokem state blank

16 create authmiddleware where we will grab token from frntend and remove bearer.
now verify using jwt.verify 
the thing we get from this will be the data we pass on payload during jwt.sign

ab bs is data ma se email pakadke sara userdata nikal lo
and req.user krke ek property bnalo or middleware hai aage pass kr do

17 frontend ma function bnado jo ki userdata pkde (response ma pass kia na backend ma vo vala) or aage pass krde provider ko

18 backend se data fetch krna ha to st3p
model bnao
route bnao
controller ma   modelName.find krke sara data response ma lelo or res.send krdo
frontenf ma get kro service ka data and 
frontend ma map krdo isi response ko

Admin panel short points

1 getAll user data using Usermodel.find() in backend and fetch it in frontend then nap the response
2 getContact data using Contactmodel.find() and same as above
3 use Auth middleware
4 useadminMiddleware by checking req.isAdmin == True (ye isAdmin hune auth middleware ma pass kr denge)

5 build nested Routes for admin do not forget to add Outlet conponent

6 to delete user have onChange on del button where we will pass userId with del function
define routes and controller on backend
call api with /:id  where id will be taken from url req.params.id then delete

7 To update 
-- click on edit button where feom frontenf we will pass id
-- on route we will use /:id route and controller will take id using req.params to find data
--  To show data on frontend, edit apne sath id dega url ma...usko hum fetch api ma pass kr denge.. jo backend ma trigger hoke humko us id ki details response ma degaz usko hum apne component ma data show kr denge
--- ab edit page khula to backend ma route define krke req.params se id uthai
or req.body se data uthaya or us particular id pr updateOne lga dia data ko
-- frontend ma submit pr handle submit ke andar us route ko fetch kia jisme id pass kr denge  or update ho jaega
do not frget to add content type application json

8 To secure route  is user.isAdmin is not true to direct home page pr redirect krdo main admin page se hi